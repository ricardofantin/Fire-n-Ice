[gd_scene load_steps=4 format=2]

[ext_resource path="res://player.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D

# constants
var tilemap
var NORMAL

# player status
var face_direction
var can_control # cannot control on falling or moving up a wall/ice # or when a ice is sliding
var can_create_ice
var timer

func _ready():
	tilemap = self.get_parent()
	NORMAL = Vector2(0, -1)
	face_direction = 1 # facing right
	can_control = true
	can_create_ice = true
	timer = get_node(\"Timer\")
	timer.connect(\"timeout\", self, \"_create_ice_timer_timeout\")

func _create_ice_timer_timeout():
	can_create_ice = true

#enum elements {EMPTY = -1, WALL = 0, ICE = 1, FIRE = 2, PLAYER = 3}
enum elements {EMPTY = -1, WALL = 0, ICE = 1, ICE_LEFT = 2,
			   ICE_MIDDLE = 3, ICE_RIGHT = 4, FIRE = 5, PLAYER = 6}
func get_element(position):
	# position should be a Vector2
	position.x = int(position.x/32)
	position.y = int(position.y/32)
	return tilemap.get_cellv(position)

func get_tiled_position():
	var p = get_position() + Vector2(16, 16)
	p.x = int(p.x/32)
	p.y = int(p.y/32)
	return p

func _physics_process(_delta):
	if is_on_floor() and can_control == true: # is on floor, can move and etc
		if can_create_ice and Input.is_action_pressed(\"ui_down\"):
			var pos_create_ice = get_tiled_position() + Vector2(0, 1)
			if tilemap.is_solidv(pos_create_ice):
				pos_create_ice += face_direction*Vector2(1, 0)
			if tilemap.can_create_destroy_icev(pos_create_ice):
				tilemap.create_destroy_icev(pos_create_ice)
				can_create_ice = false
				timer.start()
		elif Input.is_action_pressed(\"ui_right\") || Input.is_action_pressed(\"ui_left\"):
			if Input.is_action_pressed(\"ui_right\"):
				face_direction = 1
			elif Input.is_action_pressed(\"ui_left\"):
				face_direction = -1
			self.get_child(1).flip_h = false if face_direction == 1 else true
			var v = Vector2(face_direction * 32 * 5, 0)
			var _unused = move_and_slide(v, NORMAL)
			var p = get_tiled_position()
			var x = p.x
			var y = p.y
			var front_solid = tilemap.is_solid(x + face_direction, y)
			var upper_solid = tilemap.is_solid(x, y - 1)
			var upper_front_solid = tilemap.is_solid(x + face_direction, y - 1)
			var front_front_solid = tilemap.is_solid(x + 2*face_direction, y)
			# test push ICE
			if is_on_wall() and tilemap.is_ice(x + face_direction, y) and !front_front_solid:
				tilemap.set_cell(x + face_direction, y, elements.EMPTY)
				var ice = load(\"res://Ice.tscn\").instance(-1)
				tilemap.add_child(ice)
				ice.set_position(32*Vector2(x + face_direction, y) + Vector2(0, 16) + Vector2(16, 0))
				ice.set_direction(face_direction)
				can_control = false
			elif is_on_wall() and tilemap.get_cell(x + face_direction, y) == elements.FIRE:
				print_debug(\"NÃ£o pude mudar o mundo\")
			elif is_on_wall() and front_solid and !upper_solid and !upper_front_solid:
				set_position(get_position() + Vector2(face_direction, -32))
	else: # cannot control
		if !is_on_floor():
			var v = Vector2(0, 160)
			var hit = move_and_slide(v, NORMAL)
			if hit != null:
				can_control = true
"

[sub_resource type="RectangleShape2D" id=2]
extents = Vector2( 7.14286, 10 )

[node name="player" type="KinematicBody2D"]
script = SubResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 11.5, 15 )
scale = Vector2( 1.6, 1.5 )
shape = SubResource( 2 )

[node name="jogador" type="Sprite" parent="."]
position = Vector2( 11, 14 )
texture = ExtResource( 1 )

[node name="Timer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true
